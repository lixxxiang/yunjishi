package com.android.lixiang.base.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user_profile".
*/
public class UserProfileDao extends AbstractDao<UserProfile, String> {

    public static final String TABLENAME = "user_profile";

    /**
     * Properties of entity UserProfile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Level = new Property(2, String.class, "level", false, "LEVEL");
        public final static Property Label = new Property(3, String.class, "label", false, "LABEL");
        public final static Property UserTelephone = new Property(4, String.class, "userTelephone", false, "USER_TELEPHONE");
        public final static Property UserPassword = new Property(5, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property ImagePath = new Property(6, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property GmtCreated = new Property(7, String.class, "gmtCreated", false, "GMT_CREATED");
    }


    public UserProfileDao(DaoConfig config) {
        super(config);
    }
    
    public UserProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user_profile\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "\"USERNAME\" TEXT," + // 1: username
                "\"LEVEL\" TEXT," + // 2: level
                "\"LABEL\" TEXT," + // 3: label
                "\"USER_TELEPHONE\" TEXT," + // 4: userTelephone
                "\"USER_PASSWORD\" TEXT," + // 5: userPassword
                "\"IMAGE_PATH\" TEXT," + // 6: imagePath
                "\"GMT_CREATED\" TEXT);"); // 7: gmtCreated
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user_profile\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserProfile entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(3, level);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(4, label);
        }
 
        String userTelephone = entity.getUserTelephone();
        if (userTelephone != null) {
            stmt.bindString(5, userTelephone);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(6, userPassword);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(7, imagePath);
        }
 
        String gmtCreated = entity.getGmtCreated();
        if (gmtCreated != null) {
            stmt.bindString(8, gmtCreated);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserProfile entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(3, level);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(4, label);
        }
 
        String userTelephone = entity.getUserTelephone();
        if (userTelephone != null) {
            stmt.bindString(5, userTelephone);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(6, userPassword);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(7, imagePath);
        }
 
        String gmtCreated = entity.getGmtCreated();
        if (gmtCreated != null) {
            stmt.bindString(8, gmtCreated);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserProfile readEntity(Cursor cursor, int offset) {
        UserProfile entity = new UserProfile( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // level
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // label
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userTelephone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userPassword
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imagePath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // gmtCreated
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserProfile entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLevel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLabel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserTelephone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImagePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGmtCreated(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserProfile entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(UserProfile entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserProfile entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
